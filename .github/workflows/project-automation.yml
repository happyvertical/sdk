name: Project Board Automation

on:
  issues:
    types: [opened, labeled, unlabeled]
  pull_request:
    types: [opened, labeled, unlabeled]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to sync'
        required: false

env:
  PROJECT_NUMBER: 7  # HAppy VErtical SDK Development Workflow project

jobs:
  sync-labels-to-project:
    runs-on: ubuntu-latest
    permissions:
      issues: read
      pull-requests: read
      repository-projects: write
    steps:
      - name: Get issue or PR details
        id: get-item
        uses: actions/github-script@v7
        with:
          script: |
            let item;
            if (context.eventName === 'workflow_dispatch' && context.payload.inputs.issue_number) {
              // Manual trigger with specific issue
              const issueNumber = parseInt(context.payload.inputs.issue_number);
              item = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber
              }).then(res => res.data);
            } else {
              // Triggered by issue/PR event
              item = context.payload.issue || context.payload.pull_request;
            }
            
            if (!item) {
              console.log('No issue or PR found');
              return;
            }
            
            // Find status label
            const statusLabel = item.labels.find(label => 
              typeof label === 'object' && label.name && label.name.startsWith('status:')
            );
            
            if (!statusLabel) {
              console.log('No status label found');
              return;
            }
            
            core.setOutput('item_node_id', item.node_id);
            core.setOutput('status_label', statusLabel.name);
            core.setOutput('item_number', item.number);

      - name: Update project column
        if: steps.get-item.outputs.item_node_id
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const itemNodeId = '${{ steps.get-item.outputs.item_node_id }}';
            const statusLabel = '${{ steps.get-item.outputs.status_label }}';
            const projectNumber = ${{ env.PROJECT_NUMBER }};
            
            // Map labels to column names
            const labelToColumn = {
              'status:new-issue': 'New Issues',
              'status:icebox': 'Icebox',
              'status:backlog': 'Backlog',
              'status:to-do': 'To Do',
              'status:in-progress': 'In Progress',
              'status:review-testing': 'Review & Testing',
              'status:ready-for-deployment': 'Ready for Deployment',
              'status:deployed': 'Deployed'
            };
            
            const columnName = labelToColumn[statusLabel];
            if (!columnName) {
              console.log(`Unknown status label: ${statusLabel}`);
              return;
            }
            
            try {
              // Get the project
              const projectQuery = await github.graphql(`
                query($org: String!, $number: Int!) {
                  organization(login: $org) {
                    projectV2(number: $number) {
                      id
                      field(name: "Status") {
                        ... on ProjectV2SingleSelectField {
                          id
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              `, {
                org: context.repo.owner,
                number: projectNumber
              });
              
              const project = projectQuery.organization.projectV2;
              if (!project) {
                console.log('Project not found');
                return;
              }
              
              const statusField = project.field;
              if (!statusField) {
                console.log('Status field not found');
                return;
              }
              
              const option = statusField.options.find(opt => opt.name === columnName);
              if (!option) {
                console.log(`Column not found: ${columnName}`);
                return;
              }
              
              // Check if item is already in project
              const itemQuery = await github.graphql(`
                query($itemId: ID!) {
                  node(id: $itemId) {
                    ... on Issue {
                      projectItems(first: 100) {
                        nodes {
                          id
                          project {
                            id
                          }
                        }
                      }
                    }
                    ... on PullRequest {
                      projectItems(first: 100) {
                        nodes {
                          id
                          project {
                            id
                          }
                        }
                      }
                    }
                  }
                }
              `, {
                itemId: itemNodeId
              });
              
              let projectItemId = null;
              const projectItems = itemQuery.node.projectItems?.nodes || [];
              const existingItem = projectItems.find(pi => pi.project.id === project.id);
              
              if (existingItem) {
                projectItemId = existingItem.id;
                console.log('Item already in project, updating status...');
              } else {
                // Add item to project
                console.log('Adding item to project...');
                const addResult = await github.graphql(`
                  mutation($projectId: ID!, $contentId: ID!) {
                    addProjectV2ItemById(input: {
                      projectId: $projectId
                      contentId: $contentId
                    }) {
                      item {
                        id
                      }
                    }
                  }
                `, {
                  projectId: project.id,
                  contentId: itemNodeId
                });
                
                projectItemId = addResult.addProjectV2ItemById.item.id;
              }
              
              // Update the status field
              await github.graphql(`
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: {
                      singleSelectOptionId: $optionId
                    }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `, {
                projectId: project.id,
                itemId: projectItemId,
                fieldId: statusField.id,
                optionId: option.id
              });
              
              console.log(`âœ… Moved item #${{ steps.get-item.outputs.item_number }} to column: ${columnName}`);
              
            } catch (error) {
              console.error('Error updating project:', error);
              throw error;
            }

  # Sync project column changes back to labels
  sync-project-to-labels:
    runs-on: ubuntu-latest
    if: github.event_name == 'project_card'
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Update labels based on column
        uses: actions/github-script@v7
        with:
          script: |
            // This job handles the reverse sync: project column -> labels
            // It requires the project webhook to be configured
            console.log('Project card event - would sync column to labels');
            console.log('Note: This requires project webhooks to be configured');